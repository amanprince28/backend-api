generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, uuid_ossp(map: "uuid-ossp", schema: "public")]
}

model customer {
  id               String     @id(map: "customer_pk") @default(uuid()) @db.Uuid
  car_plate        String?    @map("car-plate") @db.VarChar(255)
  email            String?    @db.VarChar(255)
  gender           String?    @db.VarChar(255)
  ic               String?    @db.VarChar(255)
  marital_status   String?    @map("marital-status") @db.VarChar(255)
  mobile_no        String?    @map("mobile-no") @db.VarChar(255)
  name             String?    @db.VarChar(255)
  no_of_child      Int?       @map("no-of-child")
  passport         String?    @db.VarChar(255)
  race             String?    @db.VarChar(255)
  tel_code         String?    @map("tel-code") @db.VarChar(255)
  tel_no           String?    @map("tel-no") @db.VarChar(255)
  deleted_at       DateTime?
  customer_address Json?
  relations        Json?
  employment       Json?
  bank_details     Json?
  document         document[]
  created_by       String?    @db.Uuid
  supervisor       String?    @db.Uuid
}

model country {
  id     String  @id(map: "country_pk") @default(uuid()) @db.Uuid
  name   String  @db.VarChar(255)
  states state[]
}

model state {
  id         String  @id(map: "state_pk") @default(uuid()) @db.Uuid
  name       String  @db.VarChar(255)
  country_id String  @db.Uuid
  cities     city[]
  country    country @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "state_country_fk")
}

model city {
  id       String @id(map: "city_pk") @default(uuid()) @db.Uuid
  name     String @db.VarChar(255)
  state_id String @db.Uuid
  state    state  @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "city_state_fk")
}

model user {
  id         String   @id @default(uuid()) @db.Uuid
  email      String   @unique @db.VarChar(255)
  password   String?  @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  role       Role?    @default(Editor)
  supervisor String?   @db.Uuid
}

model document {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @db.VarChar(255)
  customer_id String?   @map("customer-id") @db.Uuid
  path        String    @db.VarChar(255)
  customer    customer? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  SuperAdmin
  Admin
  Editor
}
